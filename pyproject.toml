[project]
name = "financial-data-pipeline"
version = "0.1.0"
description = ""
authors = [
    {name = "Victor Soares Ferreira",email = "victorsoaresferreiradev09@gmail.com"}
]
readme = "README.md"
requires-python =  "^3.10"
dependencies = [
    "pandas (>=2.3.1,<3.0.0)",
    "fastapi (>=0.116.1,<0.117.0)",
    "uvicorn (>=0.35.0,<0.36.0)",
    "sqlalchemy (>=2.0.42,<3.0.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "requests (>=2.32.4,<3.0.0)",
    "psycopg2-binary (>=2.9.10,<3.0.0)",
    "numpy (>=1.26,<2.0)",
    "openpyxl (>=3.1.5,<4.0.0)",
    "python-multipart (>=0.0.20,<0.0.21)"
]


[tool.poetry.dependencies]
python = "^3.10"
pandas = "^2.0.0"
fastapi = ">=0.116.1,<0.117.0"
uvicorn = ">=0.35.0,<0.36.0"
sqlalchemy = "^2.0.0"
python-dotenv = "^1.0.0"
requests = "^2.31.0"
pydantic = "^2.5.0"
httpx = "^0.25.0"

# Dependências opcionais para dashboards
plotly = {version = "^5.17.0", optional = true}
streamlit = {version = "^1.28.0", optional = true}

# Dependências opcionais para banco de dados
psycopg2-binary = {version = "^2.9.0", optional = true}
pymongo = {version = "^4.6.0", optional = true}

[tool.poetry.extras]
dashboard = ["plotly", "streamlit"]
postgres = ["psycopg2-binary"]
mongodb = ["pymongo"]
all = ["plotly", "streamlit", "psycopg2-binary", "pymongo"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
black = "^23.10.0"
isort = "^5.12.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
flake8 = "^6.1.0"
bandit = "^1.7.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# === CONFIGURAÇÕES DE FERRAMENTAS ===

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["financial_data_pipeline"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
