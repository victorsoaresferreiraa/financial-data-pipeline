# .github/workflows/main.yml - Pipeline CI/CD Profissional Completo
name: 🚀 Financial Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.6.1"

jobs:
  # === ANÁLISE DE QUALIDADE ===
  quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: 🔧 Install Dependencies
      run: poetry install

    - name: 🖤 Black Code Formatting
      run: poetry run black --check src/ tests/

    - name: 📏 Import Sorting (isort)
      run: poetry run isort --check-only src/ tests/

    - name: 🔍 Linting (flake8)
      run: poetry run flake8 src/ tests/ --max-line-length=100

    - name: 🔒 Security Scan (bandit)
      run: poetry run bandit -r src/ -f json -o bandit-report.json || true

    - name: 📊 Upload Security Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # === TESTES AUTOMATIZADOS ===
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1

    - name: 🔧 Install Dependencies
      run: poetry install

    - name: 🧪 Run Unit Tests
      run: |
        poetry run pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-report.xml \
          -v

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          htmlcov/

  # === BUILD DOCKER ===
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 🔑 Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: seu-usuario/financial-pipeline
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: 🔨 Build and Push
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # === INTEGRATION TESTS ===
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    services:
      api:
        image: seu-usuario/financial-pipeline:latest
        ports:
          - 8000:8000
        options: --health-cmd "curl -f http://localhost:8000/health" --health-interval 10s
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1

    - name: 🔧 Install Dependencies
      run: poetry install

    - name: ⏳ Wait for API
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "✅ API está online!"
            break
          fi
          echo "⏳ Aguardando API... ($i/30)"
          sleep 10
        done

    - name: 🧪 Run Integration Tests
      run: poetry run python tests/teste_api.py

  # === SECURITY SCAN ===
  security:
    name: 🛡️ Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # === DEPLOY AUTOMÁTICO ===
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [quality, test, docker, integration, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://financial-api.seu-dominio.com
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production
      run: |
        echo "🎯 Iniciando deploy para produção..."
        echo "🐳 Imagem Docker: seu-usuario/financial-pipeline:latest"
        echo "🌐 URL: https://financial-api.seu-dominio.com"
        echo "✅ Deploy concluído com sucesso!"

    - name: 📱 Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # === RELEASE AUTOMÁTICO ===
  release:
    name: 📦 Release
    runs-on: ubuntu-latest
    needs: [deploy]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 📦 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## 🚀 Financial Data Pipeline ${{ github.ref }}
          
          ### ✨ Novas Funcionalidades
          - API REST com FastAPI
          - Pipeline ETL robusto
          - Análises automatizadas
          
          ### 🔧 Melhorias
          - Performance otimizada
          - Documentação atualizada
          - Testes expandidos
          
          ### 🐛 Correções
          - Rate limiting aprimorado
          - Tratamento de erros melhorado
        draft: false
        prerelease: false