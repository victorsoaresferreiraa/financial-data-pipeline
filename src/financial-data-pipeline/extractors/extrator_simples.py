# extrator_simples.py - Vers√£o bem f√°cil para come√ßar

import json
from datetime import datetime
import random

class ExtratorFinanceiro:
    """Classe simples para extrair dados de a√ß√µes"""
    
    def __init__(self):
        print("üöÄ Extrator Financeiro iniciado!")
        self.dados_extraidos = []
    
    def simular_dados_acao(self, codigo_acao):
        """
        Simula dados de uma a√ß√£o
        
        Par√¢metros:
        codigo_acao (str): C√≥digo da a√ß√£o (ex: "PETR4")
        
        Retorna:
        dict: Dados da a√ß√£o
        """
        # Gerar dados aleat√≥rios (simula API real)
        dados_acao = {
            "codigo": codigo_acao.upper(),
            "empresa": self._obter_nome_empresa(codigo_acao),
            "preco": round(random.uniform(20.0, 100.0), 2),
            "volume": random.randint(100000, 2000000),
            "variacao": round(random.uniform(-5.0, 5.0), 2),
            "data_hora": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        print(f"üìä Dados extra√≠dos para {codigo_acao}: R$ {dados_acao['preco']}")
        return dados_acao
    
    def _obter_nome_empresa(self, codigo):
        """Retorna nome da empresa baseado no c√≥digo"""
        empresas = {
            "PETR4": "Petrobras",
            "VALE3": "Vale",
            "ITUB4": "Ita√∫",
            "BBDC4": "Bradesco",
            "ABEV3": "Ambev",
            "PVB11": "Papel"
        }
        return empresas.get(codigo.upper(), "Empresa Desconhecida")
    
    def extrair_multiplas_acoes(self, lista_acoes):
        """
        Extrai dados de v√°rias a√ß√µes
        
        Par√¢metros:
        lista_acoes (list): Lista com c√≥digos das a√ß√µes
        
        Retorna:
        list: Lista com dados de todas as a√ß√µes
        """
        print(f"üîÑ Extraindo dados de {len(lista_acoes)} a√ß√µes...")
        
        todas_acoes = []
        
        for codigo in lista_acoes:
            dados = self.simular_dados_acao(codigo)
            todas_acoes.append(dados)
            self.dados_extraidos.append(dados)
        
        print(f"‚úÖ Extra√ß√£o conclu√≠da! {len(todas_acoes)} a√ß√µes processadas")
        return todas_acoes
    
    def salvar_dados(self, dados, nome_arquivo="dados_acoes.json"):
        """
        Salva dados em arquivo JSON
        
        Par√¢metros:
        dados (list): Lista com dados das a√ß√µes
        nome_arquivo (str): Nome do arquivo para salvar
        """
        try:
            with open(nome_arquivo, 'w', encoding='utf-8') as arquivo:
                json.dump(dados, arquivo, indent=2, ensure_ascii=False)
            
            print(f"üíæ Dados salvos em '{nome_arquivo}'")
            
        except Exception as erro:
            print(f"‚ùå Erro ao salvar: {erro}")
    
    def mostrar_resumo(self, dados):
        """
        Mostra resumo dos dados extra√≠dos
        
        Par√¢metros:
        dados (list): Lista com dados das a√ß√µes
        """
        if not dados:
            print("‚ö†Ô∏è  Nenhum dado para mostrar")
            return
        
        print("\nüìà === RESUMO DOS DADOS ===")
        print(f"Total de a√ß√µes: {len(dados)}")
        
        # Calcular estat√≠sticas simples
        precos = [acao['preco'] for acao in dados]
        preco_medio = sum(precos) / len(precos)
        preco_maior = max(precos)
        preco_menor = min(precos)
        
        print(f"Pre√ßo m√©dio: R$ {preco_medio:.2f}")
        print(f"Maior pre√ßo: R$ {preco_maior:.2f}")
        print(f"Menor pre√ßo: R$ {preco_menor:.2f}")
        
        print("\nüìã Detalhes por a√ß√£o:")
        for acao in dados:
            variacao_emoji = "üìà" if acao['variacao'] >= 0 else "üìâ"
            print(f"{variacao_emoji} {acao['codigo']} ({acao['empresa']}): R$ {acao['preco']} ({acao['variacao']:+.2f}%)")

    # Adicione esta fun√ß√£o √† sua classe:
    def analise_com_pandas(self, dados):
        """An√°lise profissional com pandas"""
        import pandas as pd
        
        # Converter dados para DataFrame
        df = pd.DataFrame(dados)
        
        print("\nüìä === AN√ÅLISE COM PANDAS ===")
        print("Estat√≠sticas descritivas:")
        print(df[['preco', 'volume', 'variacao']].describe())
        
        # A√ß√£o com melhor performance
        melhor_acao = df.loc[df['variacao'].idxmax()]
        print(f"\nü•á Melhor performance: {melhor_acao['codigo']} (+{melhor_acao['variacao']:.2f}%)")
        
        # A√ß√£o com maior volume
        maior_volume = df.loc[df['volume'].idxmax()]
        print(f"üìä Maior volume: {maior_volume['codigo']} ({maior_volume['volume']:,} a√ß√µes)")

    def extrair_acao_especifica(self, codigo_acao):
        """
        Extrai dados de apenas uma a√ß√£o espec√≠fica
        
        Par√¢metros:
        codigo_acao (str): C√≥digo da a√ß√£o
        
        Retorna:
        dict: Dados da a√ß√£o
        """
        print(f"üéØ Extraindo dados espec√≠ficos de {codigo_acao}...")
        dados = self.simular_dados_acao(codigo_acao)
        
        # Salvar em arquivo separado
        nome_arquivo = f"{codigo_acao.lower()}_dados.json"
        self.salvar_dados([dados], nome_arquivo)
        
        return dados

# === EXEMPLO DE USO (PARTE PRINCIPAL) ===

if __name__ == "__main__":
    # Criar o extrator
    extrator = ExtratorFinanceiro()
    
    # Lista de a√ß√µes brasileiras para extrair
    acoes_brasileiras = ["PETR4", "VALE3", "ITUB4", "BBDC4", "ABEV3", "PVB11"] 
    
    print("üáßüá∑ Extraindo dados de a√ß√µes brasileiras...\n")
    
    # Extrair dados de todas as a√ß√µes
    dados_extraidos = extrator.extrair_multiplas_acoes(acoes_brasileiras)
    
    # Mostrar resumo
    extrator.mostrar_resumo(dados_extraidos)
    
    # Salvar dados em arquivo
    extrator.salvar_dados(dados_extraidos, "minhas_acoes.json")

    dados_vale = extrator.extrair_acao_especifica("VALE3")
    
    # Exemplo de como extrair apenas uma a√ß√£o
    print("\n" + "="*50)
    print("üîç Extraindo dados de uma a√ß√£o espec√≠fica...")
    
    dados_petrobras = extrator.simular_dados_acao("PETR4")
    print(f"Dados da Petrobras: {dados_petrobras}")
    
    print("\nüéâ Programa executado com sucesso!")
    print("üìÑ Verifique o arquivo 'portfolio_brasileiro.json' criado na pasta do projeto")